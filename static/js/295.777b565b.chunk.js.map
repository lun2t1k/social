{"version":3,"file":"static/js/295.777b565b.chunk.js","mappings":"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","sources":["views/pages/messages/chat/ChatHeader.jsx","views/pages/messages/chat/messageType/ContactMessage.jsx","views/pages/messages/chat/messageType/UserMessage.jsx","views/pages/messages/chat/ChatMessages.jsx","views/components/icons/SendIcon.jsx","views/pages/messages/chat/ChatInput.jsx","views/pages/messages/chat/Chat.jsx","views/pages/messages/chats/ChatsItem.jsx","views/pages/messages/chats/ChatsList.jsx","views/pages/messages/chats/ChatsSearch.jsx","views/pages/messages/Messages.jsx"],"sourcesContent":["import { NavLink } from 'react-router-dom'\nimport UserAvatar from '../../../components/UserAvatar'\n\nexport default function MessageHeader() {\n    return (\n        <div className='relative flex items-center justify-center p-2 md:justify-between'>\n            <NavLink\n                to='/messages'\n                className='absolute left-[4px] flex items-center text-xs md:relative md:-left-[4px] md:text-sm'\n            >\n                <svg\n                    xmlns='http://www.w3.org/2000/svg'\n                    fill='none'\n                    viewBox='0 0 24 24'\n                    strokeWidth={ 2 }\n                    stroke='currentColor'\n                    className='h-4 w-4'\n                >\n                    <path\n                        strokeLinecap='round'\n                        strokeLinejoin='round'\n                        d='M15.75 19.5L8.25 12l7.5-7.5'\n                    />\n                </svg>\n                <span>Back</span>\n            </NavLink>\n            <span className='w-full text-center text-sm font-semibold md:text-md'>\n                User Name\n            </span>\n            <UserAvatar img={ null } size='sm' />\n        </div>\n    )\n}\n","export default function ContactMessage({ message }) {\n    return (\n        <div\n            id={ message.id }\n            className='contactMessage flex w-full justify-start py-2'\n        >\n            <div className='flex flex-wrap items-end gap-2 max-w-[250px] sm:max-w-[400px] rounded-2xl rounded-bl-none bg-gray-200 py-2 px-3 text-xs dark:bg-zinc-700'>\n                <span className='flex-[1_1_auto]'>{ message.text }</span>\n                <span className='italic uppercase text-2xs'>{ message.time }</span>\n            </div>\n        </div>\n    )\n}\n","export default function UserMessage({ message }) {\n    return (\n        <div\n            id={ message.id }\n            className='userMessage flex w-full justify-end py-2'\n        >\n            <div className='flex flex-wrap justify-end items-end gap-2 max-w-[250px] sm:max-w-[400px] rounded-2xl rounded-br-none bg-gradient-to-tr from-violet-400 to-fuchsia-400 py-2 px-3 text-xs text-white'>\n                <span className='flex-[1_1_auto]'>{ message.text }</span>\n                <span className='italic uppercase text-2xs'>{ message.time }</span>\n            </div>\n        </div>\n    )\n}\n","import { useLayoutEffect, useRef } from 'react'\nimport { connect } from 'react-redux'\nimport ContactMessage from './messageType/ContactMessage'\nimport UserMessage from './messageType/UserMessage'\n\nconst ChatMessages = ({ messages }) => {\n    const messagesWindow = useRef(null)\n    useLayoutEffect(() => {\n        messagesWindow.current.scrollTo(0, 1000)\n    }, [messages])\n\n    return (\n        <div ref={ messagesWindow } className='flex flex-auto flex-col overflow-scroll border-y p-2 dark:border-y-zinc-800 md:px-5 md:py-3'>\n            {\n                messages.map(message => {\n                    if (message.type === 'contact') {\n                        return (\n                            <ContactMessage\n                                key={ message.id }\n                                message={ message }\n                            />\n                        )\n                    } else {\n                        return (\n                            <UserMessage\n                                key={ message.id }\n                                message={ message }\n                            />\n                        )\n                    }\n                })\n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        messages: state.messages.messages\n    }\n}\n\nexport default connect(mapStateToProps, null)(ChatMessages)\n","export default function SendIcon({ extraClasses }) {\n    return (\n        <svg\n            xmlns='http://www.w3.org/2000/svg'\n            fill='none'\n            viewBox='0 0 24 24'\n            strokeWidth={ 1.5 }\n            stroke='currentColor'\n            className={ ' h-5 w-5 ' + extraClasses }\n        >\n            <path\n                strokeLinecap='round'\n                strokeLinejoin='round'\n                d='M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5'\n            />\n        </svg>\n    )\n}\n","import { connect } from 'react-redux'\nimport { Formik, Form, Field } from 'formik'\nimport moment from 'moment'\nimport { sendMessage } from '../../../../redux/ducks/messages'\nimport { NewMessageSchema } from '../../../../helpers/yup'\nimport { button, textarea } from '../../../../helpers/theme'\nimport Spinner from '../../../components/Spinner'\nimport SendIcon from '../../../components/icons/SendIcon'\n\nconst ChatInput = ({ sendMessage }) => {\n    const onSubmit = (values, actions) => {\n        let time = moment().format('hh:mm a')\n        sendMessage(values.newMessageText, time)\n        actions.resetForm()\n    }\n\n    return (\n        <Formik\n            initialValues={ { newMessageText: '' } }\n            validationSchema={ NewMessageSchema }\n            onSubmit={ onSubmit }\n        >\n            { ({ isSubmitting, isValid }) => (\n                <Form className='flex w-full items-end gap-2 p-2'>\n                    <Field\n                        name='newMessageText'\n                        as='textarea'\n                        placeholder='Message'\n                        className={\n                            textarea.default +\n                            'h-0 max-h-[150px] min-h-[36px] rounded-tl-xl rounded-br-none py-2 px-3 text-xs'\n                        }\n                    />\n                    <button\n                        type='submit'\n                        disabled={ !isValid || isSubmitting }\n                        className={ button.size.md + button.default + button.disabled + 'rounded-full !p-2' }\n                    >\n                        { isSubmitting ? (\n                            <Spinner size='md' />\n                        ) : (\n                            <SendIcon extraClasses='relative -right-[1px]' />\n                        ) }\n                    </button>\n                </Form>\n            ) }\n        </Formik>\n    )\n}\n\nexport default connect(null, { sendMessage })(ChatInput)\n","import ChatHeader from './ChatHeader'\nimport ChatMessages from './ChatMessages'\nimport ChatInput from './ChatInput'\n\nexport default function Chat() {\n    return (\n        <>\n            <ChatHeader />\n            <ChatMessages />\n            <ChatInput />\n        </>\n    )\n}\n","import { NavLink } from 'react-router-dom'\nimport UserAvatar from '../../../components/UserAvatar'\n\nexport default function ChatsItem({ chat }) {\n    let defaultClassName =\n        ' p-2 lg:pl-5 lg:pr-2 first:pt-2 last:pb-2 flex gap-3 items-center hover:bg-slate-100 dark:hover:bg-zinc-800 transition-all ease-in '\n\n    return (\n        <NavLink\n            to={ `/messages/${chat.id}` }\n            className={ ({ isActive }) =>\n                isActive\n                    ? defaultClassName +\n                    'bg-violet-400 text-white hover:bg-violet-400 dark:bg-violet-400 dark:hover:bg-violet-400'\n                    : defaultClassName\n            }\n        >\n            <UserAvatar img={ chat.avatar } size='2md' />\n            <div className='hidden min-w-0 flex-col lg:flex gap-1'>\n                <h5 className='font-semibold'>{ chat.name ? chat.name : 'Undefined' }</h5>\n                <span className='truncate text-xs'>{ chat.lastMessage }</span>\n            </div>\n        </NavLink>\n    )\n}\n","import { connect } from 'react-redux'\nimport ChatsItem from './ChatsItem'\n\nconst ChatsList = ({ chats }) => {\n    return (\n        <div className='h-full overflow-scroll lg:pb-[62px] divide-y dark:divide-zinc-800'>\n            { chats.map(chat => (\n                <ChatsItem\n                    key={ chat.id }\n                    chat={ chat }\n                />\n            )) }\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        chats: state.messages.chats\n    }\n}\n\nexport default connect(mapStateToProps, null)(ChatsList)\n","export default function ChatsSearch() {\n    return (\n        <form className='hidden border-b p-5 pr-2 dark:border-b-zinc-800 lg:flex'>\n            <input\n                type='search'\n                name=''\n                id=''\n                placeholder='Search chats'\n                className='w-full outline-none dark:bg-zinc-900'\n            />\n        </form>\n    )\n}\n","import { useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { selectChat } from '../../../redux/ducks/messages'\nimport Chat from './chat/Chat'\nimport ChatsList from './chats/ChatsList'\nimport ChatsSearch from './chats/ChatsSearch'\nimport { componentWrapper } from '../../../helpers/theme'\n\nconst Messages = ({ selectChat, selectedChat }) => {\n    useEffect(() => {\n        document.title = 'Messages'\n    }, [])\n\n    let params = useParams()\n\n    useEffect(() => {\n        document.body.classList.add('overflow-hidden')\n        return document.body.classList.remove('overflow-hidden')\n    }, [])\n\n    useEffect(() => {\n        let userID = params.userID\n        selectChat(userID)\n    }, [params.userID, selectChat])\n\n    return (\n        <div className={ componentWrapper.default + 'flex h-[75vh] lg:h-[80vh]' }>\n            <div className='w-fit lg:min-w-[250px] lg:max-w-[250px]'>\n                <ChatsSearch />\n                <ChatsList />\n            </div>\n            <div className='flex h-full w-full flex-col border-l dark:border-l-zinc-800'>\n                {\n                    selectedChat ? (\n                        <Chat />\n                    ) : (\n                        <div className='flex items-center justify-center h-full p-5'>\n                            <h2 className='text-center'>Select a chat to start messaging</h2>\n                        </div>\n                    )\n                }\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        selectedChat: state.messages.selectedChat\n    }\n}\n\nexport default connect(mapStateToProps, { selectChat })(Messages)\n"],"names":["MessageHeader","className","to","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d","UserAvatar","img","size","ContactMessage","message","id","text","time","UserMessage","connect","state","messages","messagesWindow","useRef","useLayoutEffect","current","scrollTo","ref","map","type","SendIcon","extraClasses","sendMessage","initialValues","newMessageText","validationSchema","NewMessageSchema","onSubmit","values","actions","moment","format","resetForm","isSubmitting","isValid","name","as","placeholder","textarea","disabled","button","Spinner","Chat","ChatsItem","chat","defaultClassName","isActive","avatar","lastMessage","chats","ChatsSearch","selectedChat","selectChat","useEffect","document","title","params","useParams","body","classList","add","remove","userID","componentWrapper"],"sourceRoot":""}