{"version":3,"file":"static/js/295.07dbd639.chunk.js","mappings":"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","sources":["views/pages/messages/chat/ChatHeader.jsx","views/pages/messages/chat/messageType/ContactMessage.jsx","views/pages/messages/chat/messageType/UserMessage.jsx","views/pages/messages/chat/ChatMessages.jsx","views/components/icons/SendIcon.jsx","views/pages/messages/chat/ChatInput.jsx","views/pages/messages/chat/Chat.jsx","views/pages/messages/chats/ChatsItem.jsx","views/pages/messages/chats/ChatsList.jsx","views/pages/messages/chats/ChatsSearch.jsx","views/pages/messages/Messages.jsx"],"sourcesContent":["import { NavLink } from 'react-router-dom'\nimport UserAvatar from '../../../components/UserAvatar'\n\nexport default function MessageHeader({ userName, userAvatar }) {\n    return (\n        <div className='relative flex items-center justify-center p-2 md:justify-between'>\n            <NavLink\n                to='/messages'\n                className='absolute left-[4px] flex items-center text-xs md:relative md:-left-[4px] md:text-sm'\n            >\n                <svg\n                    xmlns='http://www.w3.org/2000/svg'\n                    fill='none'\n                    viewBox='0 0 24 24'\n                    strokeWidth={ 2 }\n                    stroke='currentColor'\n                    className='h-4 w-4'\n                >\n                    <path\n                        strokeLinecap='round'\n                        strokeLinejoin='round'\n                        d='M15.75 19.5L8.25 12l7.5-7.5'\n                    />\n                </svg>\n                <span className='hidden sm:inline'>Back</span>\n            </NavLink>\n            <span className='w-full text-center text-sm font-semibold md:text-md'>\n                { userName }\n            </span>\n            <UserAvatar img={ userAvatar } size='sm' />\n        </div>\n    )\n}\n","export default function ContactMessage({ message }) {\n    return (\n        <div\n            id={ message.id }\n            className='contactMessage flex w-full justify-start py-2'\n        >\n            <div className='flex max-w-[250px] flex-wrap items-end gap-2 rounded-2xl rounded-bl-none bg-gray-200 py-2 px-3 text-xs dark:bg-zinc-700 sm:max-w-[400px]'>\n                <span className='flex-[1_1_auto]'>{ message.text }</span>\n                <span className='text-2xs uppercase italic'>\n                    { message.time }\n                </span>\n            </div>\n        </div>\n    )\n}\n","export default function UserMessage({ message }) {\n    return (\n        <div\n            id={ message.id }\n            className='userMessage flex w-full justify-end py-2'\n        >\n            <div className='flex max-w-[250px] flex-wrap items-end justify-end gap-2 rounded-2xl rounded-br-none bg-gradient-to-tr from-violet-400 to-fuchsia-400 py-2 px-3 text-xs text-white sm:max-w-[400px]'>\n                <span className='flex-[1_1_auto]'>{ message.text }</span>\n                <span className='text-2xs uppercase italic'>\n                    { message.time }\n                </span>\n            </div>\n        </div>\n    )\n}\n","import { useLayoutEffect, useRef } from 'react'\nimport { connect } from 'react-redux'\nimport ContactMessage from './messageType/ContactMessage'\nimport UserMessage from './messageType/UserMessage'\n\nconst ChatMessages = ({ messages }) => {\n    const messagesWindow = useRef(null)\n    useLayoutEffect(() => {\n        messagesWindow.current.scrollTo(0, 1000)\n    }, [messages])\n\n    return (\n        <div\n            ref={ messagesWindow }\n            className='flex flex-auto flex-col overflow-scroll border-y p-2 dark:border-y-zinc-800 md:px-5 md:py-3'\n        >\n            { messages.map(message => {\n                if (message.type === 'contact') {\n                    return <ContactMessage key={ message.id } message={ message } />\n                } else {\n                    return <UserMessage key={ message.id } message={ message } />\n                }\n            }) }\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        messages: state.messages.messages\n    }\n}\n\nexport default connect(mapStateToProps, null)(ChatMessages)\n","export default function SendIcon({ extraClasses }) {\n    return (\n        <svg\n            xmlns='http://www.w3.org/2000/svg'\n            fill='none'\n            viewBox='0 0 24 24'\n            strokeWidth={ 1.5 }\n            stroke='currentColor'\n            className={ ' h-5 w-5 ' + extraClasses }\n        >\n            <path\n                strokeLinecap='round'\n                strokeLinejoin='round'\n                d='M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5'\n            />\n        </svg>\n    )\n}\n","import { connect } from 'react-redux'\nimport { Formik, Form, Field } from 'formik'\nimport moment from 'moment'\nimport { sendMessage } from '../../../../redux/ducks/messages'\nimport { NewMessageSchema } from '../../../../helpers/yup'\nimport { button, textarea } from '../../../../helpers/theme'\nimport Spinner from '../../../components/Spinner'\nimport SendIcon from '../../../components/icons/SendIcon'\n\nconst ChatInput = ({ sendMessage }) => {\n    const handleSubmit = (values, actions) => {\n        let time = moment().format('hh:mm a')\n        sendMessage(values.newMessageText, time)\n        actions.resetForm()\n    }\n\n    return (\n        <Formik\n            initialValues={ { newMessageText: '' } }\n            validationSchema={ NewMessageSchema }\n            onSubmit={ handleSubmit }\n        >\n            { ({ isSubmitting, isValid }) => (\n                <Form className='flex w-full items-end gap-2 p-2'>\n                    <Field\n                        name='newMessageText'\n                        as='textarea'\n                        placeholder='Message'\n                        className={\n                            textarea.default +\n                            'h-0 max-h-[150px] min-h-[36px] rounded-tl-xl rounded-br-none py-2 px-3 text-xs'\n                        }\n                    />\n                    <button\n                        type='submit'\n                        disabled={ !isValid || isSubmitting }\n                        className={\n                            button.size.md +\n                            button.default +\n                            button.disabled +\n                            'rounded-full !p-2'\n                        }\n                    >\n                        { isSubmitting ? (\n                            <Spinner size='md' />\n                        ) : (\n                            <SendIcon extraClasses='relative -right-[1px]' />\n                        ) }\n                    </button>\n                </Form>\n            ) }\n        </Formik>\n    )\n}\n\nexport default connect(null, { sendMessage })(ChatInput)\n","import ChatHeader from './ChatHeader'\nimport ChatMessages from './ChatMessages'\nimport ChatInput from './ChatInput'\n\nexport default function Chat({ activeChat }) {\n    return (\n        <>\n            <ChatHeader\n                userName={ activeChat.name }\n                userAvatar={ activeChat.avatar }\n            />\n            <ChatMessages />\n            <ChatInput />\n        </>\n    )\n}\n","import { NavLink } from 'react-router-dom'\nimport UserAvatar from '../../../components/UserAvatar'\n\nexport default function ChatsItem({ chat }) {\n    let defaultClassName =\n        ' p-2 lg:pl-5 lg:pr-2 first:pt-2 last:pb-2 flex gap-3 items-center md:hover:bg-slate-100 dark:md:hover:bg-zinc-800 transition-all ease-in '\n\n    return (\n        <NavLink\n            to={ `/messages/${chat.id}` }\n            className={ ({ isActive }) =>\n                isActive\n                    ? defaultClassName +\n                      'bg-violet-400 text-white hover:!bg-violet-400 dark:bg-violet-400 dark:hover:!bg-violet-400'\n                    : defaultClassName\n            }\n        >\n            <UserAvatar img={ chat.avatar } size='2md' />\n            <div className='hidden min-w-0 flex-col gap-1 lg:flex'>\n                <h5 className='font-semibold'>\n                    { chat.name ? chat.name : 'Undefined' }\n                </h5>\n                <span className='truncate text-xs'>{ chat.lastMessage }</span>\n            </div>\n        </NavLink>\n    )\n}\n","import { connect } from 'react-redux'\nimport ChatsItem from './ChatsItem'\n\nconst ChatsList = ({ chats }) => {\n    return (\n        <div className='h-full divide-y overflow-scroll dark:divide-zinc-800 lg:pb-[62px]'>\n            { chats.map(chat => (\n                <ChatsItem key={ chat.id } chat={ chat } />\n            )) }\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        chats: state.messages.chats\n    }\n}\n\nexport default connect(mapStateToProps, null)(ChatsList)\n","export default function ChatsSearch() {\n    return (\n        <form className='hidden border-b p-5 pr-2 dark:border-b-zinc-800 lg:flex'>\n            <input\n                type='search'\n                name=''\n                id=''\n                placeholder='Search chats'\n                className='w-full outline-none dark:bg-zinc-900'\n            />\n        </form>\n    )\n}\n","import { useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { selectChat } from '../../../redux/ducks/messages'\nimport Chat from './chat/Chat'\nimport ChatsList from './chats/ChatsList'\nimport ChatsSearch from './chats/ChatsSearch'\nimport { componentWrapper } from '../../../helpers/theme'\n\nconst Messages = ({ selectChat, selectedChat, chats }) => {\n    useEffect(() => {\n        document.title = 'Messages'\n    }, [])\n\n    let params = useParams()\n\n    const activeChat = chats.find(chat => chat.id == selectedChat)\n\n    useEffect(() => {\n        document.body.classList.add('overflow-hidden')\n        return document.body.classList.remove('overflow-hidden')\n    }, [])\n\n    useEffect(() => {\n        let userID = params.userID\n        selectChat(userID)\n    }, [params.userID, selectChat])\n\n    return (\n        <div className={ componentWrapper.default + 'flex h-[75vh] lg:h-[80vh]' }>\n            <div className='w-fit lg:min-w-[250px] lg:max-w-[250px]'>\n                <ChatsSearch />\n                <ChatsList />\n            </div>\n            <div className='flex h-full w-full flex-col border-l dark:border-l-zinc-800'>\n                { selectedChat ? (\n                    <Chat activeChat={ activeChat } />\n                ) : (\n                    <div className='flex h-full items-center justify-center p-5'>\n                        <h2 className='text-center'>\n                            Select a chat to start messaging\n                        </h2>\n                    </div>\n                ) }\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        selectedChat: state.messages.selectedChat,\n        chats: state.messages.chats\n    }\n}\n\nexport default connect(mapStateToProps, { selectChat })(Messages)\n"],"names":["MessageHeader","userName","userAvatar","className","to","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d","UserAvatar","img","size","ContactMessage","message","id","text","time","UserMessage","connect","state","messages","messagesWindow","useRef","useLayoutEffect","current","scrollTo","ref","map","type","SendIcon","extraClasses","sendMessage","initialValues","newMessageText","validationSchema","NewMessageSchema","onSubmit","values","actions","moment","format","resetForm","isSubmitting","isValid","name","as","placeholder","textarea","disabled","button","Spinner","Chat","activeChat","avatar","ChatsItem","chat","defaultClassName","isActive","lastMessage","chats","ChatsSearch","selectedChat","selectChat","useEffect","document","title","params","useParams","find","body","classList","add","remove","userID","componentWrapper"],"sourceRoot":""}